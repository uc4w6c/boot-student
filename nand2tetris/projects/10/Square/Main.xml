<class>
  <keyword> class </keyword>
  <identifier> Main </identifier>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> static </keyword>
    <keyword> boolean </keyword>
    <identifier> test </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> main </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <statements>
        <symbol> { </symbol>
        <classVarDec>
          <keyword> var </keyword>
          <keyword> SquareGame </keyword>
          <identifier> game </identifier>
          <symbol> ; </symbol>
        </classVarDec>
        <letStatement>
          <keyword> let </keyword>
          <identifier> game </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> SquareGame </identifier>
              <symbol> . </symbol>
              <identifier> new </identifier>
              <expression>
                <symbol> ( </symbol>
                <expression>
                </expression>
                <symbol> ) </symbol>
              </expression>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> game </identifier>
          <symbol> . </symbol>
          <identifier> run </identifier>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> game </identifier>
          <symbol> . </symbol>
          <identifier> dispose </identifier>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <expression>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
        <symbol> } </symbol>
      </statements>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> test </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <statements>
        <symbol> { </symbol>
        <classVarDec>
          <keyword> var </keyword>
          <keyword> int </keyword>
          <identifier> i </identifier>
          <identifier> j </identifier>
          <symbol> ; </symbol>
        </classVarDec>
        <classVarDec>
          <keyword> var </keyword>
          <keyword> String </keyword>
          <identifier> s </identifier>
          <symbol> ; </symbol>
        </classVarDec>
        <classVarDec>
          <keyword> var </keyword>
          <keyword> Array </keyword>
          <identifier> a </identifier>
          <symbol> ; </symbol>
        </classVarDec>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <symbol> { </symbol>
            <letStatement>
              <keyword> let </keyword>
              <identifier> s </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> "string </identifier>
                  <identifier> constant" </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> s </identifier>
              <symbol> = </symbol>
              <expression>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> a </identifier>
              <symbol> [ </symbol>
              <expression>
                <term>
                  <integerConstant> 1 </integerConstant>
                  <symbol> ] </symbol>
                </term>
              </expression>
              <symbol> ] </symbol>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> a </identifier>
                  <expression>
                    <symbol> [ </symbol>
                    <expression>
                      <term>
                        <integerConstant> 2 </integerConstant>
                        <symbol> ] </symbol>
                      </term>
                    </expression>
                    <symbol> ] </symbol>
                  </expression>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <symbol> } </symbol>
          </statements>
          <symbol> else </symbol>
        </ifStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> i </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> i </identifier>
            </term>
            <symbol> * </symbol>
            <symbol> ( </symbol>
            <expression>
              <symbol> - </symbol>
              <term>
                <identifier> j </identifier>
                <symbol> ) </symbol>
              </term>
            </expression>
            <symbol> ) </symbol>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> j </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> j </identifier>
            </term>
            <symbol> / </symbol>
            <symbol> ( </symbol>
            <expression>
              <symbol> - </symbol>
              <term>
                <integerConstant> 2 </integerConstant>
                <symbol> ) </symbol>
              </term>
            </expression>
            <symbol> ) </symbol>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> i </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> i </identifier>
            </term>
            <symbol> | </symbol>
            <term>
              <identifier> j </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <symbol> } </symbol>
      </statements>
    </subroutineBody>
  </subroutineDec>
  <symbol> ; </symbol>
</class>
