// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // adress[0]が0なら最初のものを利用。1なら2番目
    DMux(in=load, sel=address[0], a=loada, b=loadb);
    RAM16K(in=in, load=loada, address=address[1..14], out=outRAM16Ka);
    // 16384 以上のアドレスは無効のため以下は不要
    // RAM16K(in=in, load=loadb, address=address[1..14], out=outRAM16Kb);
    DMux(in=address[1], a=loadMemoryMap, b=loadDump);
    And(a=loadb, b=loadMemoryMap, out=loadScreen);
    // Dmux(in=loadMemoryMap, load=address[15], a=loadScreen, b=loadKeyboard);
    Screen(in=in, load=loadScreen, address=address[2..14], out=outScreen);
    Keyboard(out=outKeyboard);
    Mux16(a=outScreen , b=outKeyboard , sel=address[15] , out=outMemoryMap);
    Mux16(a=outRAM16Ka, b=outMemoryMap, sel=address[0], out=out);
}
