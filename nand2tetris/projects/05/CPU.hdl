// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // decode
    // 16番目が操作命令で利用するものの前提 0かもだけど
    Or(a=instruction[15], b=false, out=isComp);
    // - compニーモックの判断(0=レジスタ, 1=メモリ)
    And(a=isComp, b=instruction[12], out=compMnemonic);
    // - ALU入力値
    And(a=isComp, b=instruction[11], out=zxIn);
    And(a=isComp, b=instruction[10], out=nxIn);
    And(a=isComp, b=instruction[9], out=zyIn);
    And(a=isComp, b=instruction[8], out=nyIn);
    And(a=isComp, b=instruction[7], out=fIn);
    And(a=isComp, b=instruction[6], out=noIn);
    // - dest
    And(a=isComp, b=instruction[5], out=loadA);
    And(a=isComp, b=instruction[4], out=tmpLoadD1);
    // 以下一旦テスト
    Not(in=isComp, out=tmpLoadD2);
    Or(a=tmpLoadD1, b=tmpLoadD2, out=loadD);
    And(a=isComp, b=instruction[3], out=writeM); // out writeM
    // - jump
    And(a=isComp, b=instruction[2], out=j1);
    And(a=isComp, b=instruction[1], out=j2);
    And(a=isComp, b=instruction[0], out=j3);

    // ARegister
    Mux16(a[0..14]=instruction[0..14], b=outMemory, sel=loadA, out=registIn);
    // Register(in=registIn, load=isComp, out=outARegister, out[0..14]=addressM);
    // ARegister(in=registIn, load=isComp, out=outARegister, out[0..14]=addressM, out[0..7]=outARegisterLow, out[8..15]=outARegisterHeigh, out[15]=outARegisterSign);
    Not(in=isComp, out=isARegist);
    ARegister(in=registIn, load=isARegist, out=outARegister, out[0..14]=addressM, out[0..7]=outARegisterLow, out[8..15]=outARegisterHeigh, out[15]=outARegisterSign);

    // ALU
    Mux16(a=outARegister, b=inM, sel=isComp, out=ALUInY);

    // 順番変更する
    // DRegister(in=outMemory, load=isComp, out=ALUInX); // MEMO: 最後outMeomoryを次のtに繋げる
    ALU(x=ALUInX, y=ALUInY, zx=zxIn , nx=nxIn, zy=zyIn, ny=nyIn, f=fIn, no=noIn , out=outM, out=outMemory); // out outM
    Mux16(a[0..14]=instruction[0..14], b=outMemory, sel=isComp, out=inDRegister);
    DRegister(in=inDRegister, load=loadD, out=ALUInX);

    // PC
    // - out < 0 でjumpするか判断
    // And(a=outARegister[15], b=true, out=isMinus);
    And(a=outARegisterSign, b=true, out=isMinus);
    And(a=isMinus, b=j1, out=isJump1);
    // - out = 0でjumpするか判断
    // Or8Way(in=outARegister[0..7], out=outOr8Way1);
    // Or8Way(in=outARegister[8..15], out=outOr8Way2);
    Or8Way(in=outARegisterLow, out=outOr8Way1);
    Or8Way(in=outARegisterHeigh, out=outOr8Way2);
    And(a=outOr8Way1, b=outOr8Way2, out=isZero);
    And(a=isZero, b=j2, out=isJump2);
    // - out > 0でjumpするか判断
    Or(a=isMinus, b=isZero, out=isNotPlus);
    Not(in=isNotPlus, out=isPlus);
    And(a=isPlus, b=j3, out=isJump3);

    Or(a=isJump1, b=isJump2, out=isJump4);
    Or(a=isJump3, b=isJump4, out=isJump);
    Mux16(a=false, b=outARegister, sel=isJump, out=InPC);
    // TODO: 最終出力pcは15bitだが、PCだと16bitなので差分が生じる。これ何？？？
    // PC(in=outARegister, inc=true, load=isJump, reset=reset, out=pc); // out PC
    // PC(in=outARegister, inc=true, load=isJump, reset=reset, out[1..15]=pc); // out PC
    PC(in=InPC, inc=true, load=isJump, reset=reset, out[0..14]=pc); // out PC
}
