// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // decode
    // 16番目が操作命令で利用するものの前提 0かもだけど
    Or(a=instruction[15], b=false, out=isComp);
    // - compニーモックの判断(0=レジスタ, 1=メモリ)
    And(a=isComp, b=instruction[12], out=compMnemonic);
    // - ALU入力値
    And(a=isComp, b=instruction[11], out=zxIn);
    And(a=isComp, b=instruction[10], out=nxIn);
    And(a=isComp, b=instruction[9], out=zyIn);
    And(a=isComp, b=instruction[8], out=nyIn);
    And(a=isComp, b=instruction[7], out=fIn);
    And(a=isComp, b=instruction[6], out=noIn);
    // - dest
    And(a=isComp, b=instruction[5], out=loadA);
    And(a=isComp, b=instruction[3], out=loadD);
    And(a=isComp, b=instruction[3], out=writeM); // out writeM

    // ARegister
    Mux16(a[0..14]=inM[0..14], b=outMemory, sel=loadA, out=registIn);
    Register(in=registIn, load=isComp, out=outARegister, out[0..14]=addressM);

    // ALU
    Mux16(a=outARegister, b=inM, sel=isComp, out=ALUInY);

    Register(in=outMemory, load=isComp, out=ALUInX);

    // MEMO: 最後outMeomoryを次のtに繋げる
    ALU(x=ALUInX, y=ALUInY, zx=zxIn , nx=nxIn, zy=zyIn, ny=nyIn, f=fIn, no=noIn , out=outM, out=outMemory); // out outM

    // PC
    PC(in=outARegister, inc=true, load=isComp , reset=reset, out=pc); // out PC
}
